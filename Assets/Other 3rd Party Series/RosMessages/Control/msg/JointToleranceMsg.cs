//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Control
{
    [Serializable]
    public class JointToleranceMsg : Message
    {
        public const string k_RosMessageName = "control_msgs/JointTolerance";
        public override string RosMessageName => k_RosMessageName;

        //  The tolerances specify the amount the position, velocity, and
        //  accelerations can vary from the setpoints.  For example, in the case
        //  of trajectory control, when the actual position varies beyond
        //  (desired position + position tolerance), the trajectory goal may
        //  abort.
        // 
        //  There are two special values for tolerances:
        //   * 0 - The tolerance is unspecified and will remain at whatever the default is
        //   * -1 - The tolerance is "erased".  If there was a default, the joint will be
        //          allowed to move without restriction.
        public string name;
        public double position;
        //  in radians or meters (for a revolute or prismatic joint, respectively)
        public double velocity;
        //  in rad/sec or m/sec
        public double acceleration;
        //  in rad/sec^2 or m/sec^2

        public JointToleranceMsg()
        {
            this.name = "";
            this.position = 0.0;
            this.velocity = 0.0;
            this.acceleration = 0.0;
        }

        public JointToleranceMsg(string name, double position, double velocity, double acceleration)
        {
            this.name = name;
            this.position = position;
            this.velocity = velocity;
            this.acceleration = acceleration;
        }

        public static JointToleranceMsg Deserialize(MessageDeserializer deserializer) => new JointToleranceMsg(deserializer);

        private JointToleranceMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.name);
            deserializer.Read(out this.position);
            deserializer.Read(out this.velocity);
            deserializer.Read(out this.acceleration);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.name);
            serializer.Write(this.position);
            serializer.Write(this.velocity);
            serializer.Write(this.acceleration);
        }

        public override string ToString()
        {
            return "JointToleranceMsg: " +
            "\nname: " + name.ToString() +
            "\nposition: " + position.ToString() +
            "\nvelocity: " + velocity.ToString() +
            "\nacceleration: " + acceleration.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}

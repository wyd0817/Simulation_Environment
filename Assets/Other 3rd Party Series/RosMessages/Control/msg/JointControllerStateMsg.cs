//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Control
{
    [Serializable]
    public class JointControllerStateMsg : Message
    {
        public const string k_RosMessageName = "control_msgs/JointControllerState";
        public override string RosMessageName => k_RosMessageName;

        //  This message presents current controller state of one joint.
        //  Header timestamp should be update time of controller state
        public Std.HeaderMsg header;
        //  The set point, that is, desired state.
        public double set_point;
        //  Current value of the process (ie: latest sensor measurement on the controlled value).
        public double process_value;
        //  First time-derivative of the process value.
        public double process_value_dot;
        //  The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).
        public double error;
        //  Time between two consecutive updates/execution of the control law.
        public double time_step;
        //  Current output of the controller.
        public double command;
        //  Current PID parameters of the controller.
        public double p;
        public double i;
        public double d;
        public double i_clamp;
        public bool antiwindup;

        public JointControllerStateMsg()
        {
            this.header = new Std.HeaderMsg();
            this.set_point = 0.0;
            this.process_value = 0.0;
            this.process_value_dot = 0.0;
            this.error = 0.0;
            this.time_step = 0.0;
            this.command = 0.0;
            this.p = 0.0;
            this.i = 0.0;
            this.d = 0.0;
            this.i_clamp = 0.0;
            this.antiwindup = false;
        }

        public JointControllerStateMsg(Std.HeaderMsg header, double set_point, double process_value, double process_value_dot, double error, double time_step, double command, double p, double i, double d, double i_clamp, bool antiwindup)
        {
            this.header = header;
            this.set_point = set_point;
            this.process_value = process_value;
            this.process_value_dot = process_value_dot;
            this.error = error;
            this.time_step = time_step;
            this.command = command;
            this.p = p;
            this.i = i;
            this.d = d;
            this.i_clamp = i_clamp;
            this.antiwindup = antiwindup;
        }

        public static JointControllerStateMsg Deserialize(MessageDeserializer deserializer) => new JointControllerStateMsg(deserializer);

        private JointControllerStateMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.set_point);
            deserializer.Read(out this.process_value);
            deserializer.Read(out this.process_value_dot);
            deserializer.Read(out this.error);
            deserializer.Read(out this.time_step);
            deserializer.Read(out this.command);
            deserializer.Read(out this.p);
            deserializer.Read(out this.i);
            deserializer.Read(out this.d);
            deserializer.Read(out this.i_clamp);
            deserializer.Read(out this.antiwindup);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.set_point);
            serializer.Write(this.process_value);
            serializer.Write(this.process_value_dot);
            serializer.Write(this.error);
            serializer.Write(this.time_step);
            serializer.Write(this.command);
            serializer.Write(this.p);
            serializer.Write(this.i);
            serializer.Write(this.d);
            serializer.Write(this.i_clamp);
            serializer.Write(this.antiwindup);
        }

        public override string ToString()
        {
            return "JointControllerStateMsg: " +
            "\nheader: " + header.ToString() +
            "\nset_point: " + set_point.ToString() +
            "\nprocess_value: " + process_value.ToString() +
            "\nprocess_value_dot: " + process_value_dot.ToString() +
            "\nerror: " + error.ToString() +
            "\ntime_step: " + time_step.ToString() +
            "\ncommand: " + command.ToString() +
            "\np: " + p.ToString() +
            "\ni: " + i.ToString() +
            "\nd: " + d.ToString() +
            "\ni_clamp: " + i_clamp.ToString() +
            "\nantiwindup: " + antiwindup.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}

//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Control
{
    [Serializable]
    public class JointComponentToleranceMsg : Message
    {
        public const string k_RosMessageName = "control_msgs/JointComponentTolerance";
        public override string RosMessageName => k_RosMessageName;

        //  Version of JointTolerance.msg with added component field for joints with multiple degrees of freedom
        //  The difference between two MultiDOFJointTrajectoryPoint cannot be represented as a single number,
        //  hence we use the component field to represent how to calculate the difference in a way that can
        //  be represented as a single number.
        //  Since each joint has multiple degrees of freedom,
        //  there can be multiple tolerances for each joint, each looking
        //  at different components.
        //  If the component is X_AXIS, Y_AXIS, or Z_AXIS, then the tolerance
        //  is only applied for the specific axis.
        //  However, if the component is TRANSLATION, then the tolerance is for
        //  the overall Euclidean distance.
        //  For these components, the units are meters, meters/sec and meters/sec^2.
        //  Z_AXIS is only valid with a floating joint, not planar.
        //  If the component is ROTATION the tolerance is measured in
        //  radians, radians/sec and radians/sec^2, computed
        //  between the difference in quaternions.
        public const ushort X_AXIS = 1;
        public const ushort Y_AXIS = 2;
        public const ushort Z_AXIS = 3;
        public const ushort TRANSLATION = 4;
        public const ushort ROTATION = 5;
        public string joint_name;
        public ushort component;
        public double position;
        public double velocity;
        public double acceleration;

        public JointComponentToleranceMsg()
        {
            this.joint_name = "";
            this.component = 0;
            this.position = 0.0;
            this.velocity = 0.0;
            this.acceleration = 0.0;
        }

        public JointComponentToleranceMsg(string joint_name, ushort component, double position, double velocity, double acceleration)
        {
            this.joint_name = joint_name;
            this.component = component;
            this.position = position;
            this.velocity = velocity;
            this.acceleration = acceleration;
        }

        public static JointComponentToleranceMsg Deserialize(MessageDeserializer deserializer) => new JointComponentToleranceMsg(deserializer);

        private JointComponentToleranceMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.joint_name);
            deserializer.Read(out this.component);
            deserializer.Read(out this.position);
            deserializer.Read(out this.velocity);
            deserializer.Read(out this.acceleration);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.joint_name);
            serializer.Write(this.component);
            serializer.Write(this.position);
            serializer.Write(this.velocity);
            serializer.Write(this.acceleration);
        }

        public override string ToString()
        {
            return "JointComponentToleranceMsg: " +
            "\njoint_name: " + joint_name.ToString() +
            "\ncomponent: " + component.ToString() +
            "\nposition: " + position.ToString() +
            "\nvelocity: " + velocity.ToString() +
            "\nacceleration: " + acceleration.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
